<?php
//plugin name
$mfwp_plugin_name = 'captainform';

//patterns handled as shortags - first in array is default
$mfwp_tasg_patterns = array();
$mfwp_tasg_patterns[] = 'captainform ';
$mfwp_tasg_patterns[] = 'captain-form ';

//service domain for handler of form code
$mfwp_servicedomain = 'app.captainform.com';

//pattern for form code
$mfwp_formcode_pattern="<script type=\"text/javascript\">var customVarsMF='%%CUSTOMVARS2%%';var servicedomain=\"".$mfwp_servicedomain."\"; var cfJsHost = ((\"https:\" == document.location.protocol) ? \"https://\" : \"http://\"); document.write(unescape(\"%3Cscript src='\" + cfJsHost + servicedomain + \"/includes/easyXDM.min.js' type='text/javascript'%3E%3C/script%3E\")); document.write(unescape(\"%3Cscript src='\" + cfJsHost + servicedomain + \"/jsform-%%ID%%.js?\"+customVarsMF+\"' type='text/javascript'%3E%3C/script%3E\")); </script>";
$mfwp_online_embedcode_url = "http://".$mfwp_servicedomain."/embedded-link/%%ID%%.txt";

//plugin options key name
$mfwp_option1 = $mfwp_plugin_name.'_installation_id';
$mfwp_option2 = $mfwp_plugin_name.'_installation_key';

/**
* replace patterns into strings that have patterns
* @param string
* @param array - associate array - key is pattern, value is string for replace pattern
* @return string
**/

function mfwp_replace_patterns($str, $data = null)
{
	if ($data)
		if (is_array($data))
		{
			foreach($data as $k=>$v)
				if ($k)
					$str = str_replace ( '%%'.strtoupper ( $k ).'%%', $v, $str );
		}

	return $str;
}

/**
* encrypt params
* @param string
**/
function cf_wpp_encrypt($str)
{	  
	if (strlen($str)==0) return '';
    $key="q923Mr!x";
	$block = mcrypt_get_block_size('des', 'ecb');
    $pad = $block - (strlen($str) % $block);
    $str .= str_repeat(chr($pad), $pad);
	return base64_encode(mcrypt_encrypt(MCRYPT_DES, $key, $str, MCRYPT_MODE_ECB));
}

/**
* decrypt params
* @param string
**/
function cf_wpp_decrypt($str)
{  
	if (strlen($str)==0) return '';
	$key="q923Mr!x";
    $str = mcrypt_decrypt(MCRYPT_DES, $key, base64_decode($str), MCRYPT_MODE_ECB);
	$block = mcrypt_get_block_size('des', 'ecb');
    $pad = ord($str[($len = strlen($str)) - 1]);
    return substr($str, 0, strlen($str) - $pad);
}
